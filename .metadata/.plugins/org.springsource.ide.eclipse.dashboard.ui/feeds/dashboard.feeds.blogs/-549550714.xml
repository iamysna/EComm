<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spring</title>
  <link rel="alternate" href="https://spring.io/blog" />
  <link rel="self" href="https://spring.io/blog.atom" />
  <id>http://spring.io/blog.atom</id>
  <icon>https://spring.io/favicon.ico</icon>
  <updated>2016-02-09T16:46:00Z</updated>
  <entry>
    <title>This Week in Spring - February 9th, 2016</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/09/this-week-in-spring-february-9th-2016" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2016-02-09:2372</id>
    <updated>2016-02-09T16:46:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installation of &lt;em&gt;This Week in Spring&lt;/em&gt;! This week I&amp;rsquo;m in beautiful Stockholm, Sweden at the &lt;a href="http://twitter.com/jfokus"&gt;amazing JFokus conference&lt;/a&gt;. It&amp;rsquo;s also &lt;em&gt;Shrove Tuesday&lt;/em&gt; here in Sweden and the custom is to over-indulge, so as &lt;a href="https://en.m.wikipedia.org/wiki/Semla"&gt;I type this I am eating a Semla&lt;/a&gt;. I hope you too enjoy over-indulging on this week&amp;rsquo;s epic roundup! &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the world&amp;rsquo;s worst kept secret is &lt;em&gt;finally&lt;/em&gt; announced! We&amp;rsquo;ve been developing a reactive runtime for Spring MVC, and you can start to kick the tires! Check out this amazing &lt;a href="https://spring.io/blog/2016/02/09/reactive-spring"&gt;blog on Spring 5&amp;rsquo;s ambitions for reactive web programming&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;Spring Cloud Stream lead Marius Bogoevici has just announced Spring Cloud Stream 1.0.0.M4 which, among other things, defaults to publish/subscribe semantics, supports a notion of consumer groups, provides a simplified binder SPI, resettable Kafka offsets, and &lt;em&gt;so&lt;/em&gt; much more! Check it out!&lt;/li&gt;
  &lt;li&gt;the &lt;a href="https://github.com/spring-projects/spring-data-couchbase/tree/2.0.0.RELEASE"&gt;2.0.0.RELEASE of Spring Data Couchbase just dropped!&lt;/a&gt;. I suspect there&amp;rsquo;ll be a blog or something announcing it, but in the meantime, grab the bits and try it out!&lt;/li&gt;
  &lt;li&gt;the good Dr. David Syer&amp;rsquo;s added new &lt;a href="https://spring.io/guides/tutorials/spring-boot-oauth2/#_custom_error"&gt;chapters to the Spring &amp;amp; OAuth tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I put together a little &lt;a href="https://spring.io/blog/2016/02/07/orchestrating-work-with-activiti-and-spring-integration"&gt;post on using Activit and Spring Integration together&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;our pal Nicolas Frankel has put together &lt;a href="https://blog.frankel.ch/designing-your-own-spring-boot-starter-part-1"&gt;a nice post demystifying the power of Spring Boot&amp;rsquo;s autoconfiguration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;if you couldn&amp;rsquo;t make it to SpringOne2GX 2015 &lt;a href="http://www.infoq.com/presentations/spring-boot-web"&gt;to see Brian Clozel and Stéphane Nicoll&amp;rsquo;s presentation on using Spring Boot in the web tier&lt;/a&gt;, then you&amp;rsquo;ll love that it&amp;rsquo;s available online&lt;/li&gt;
  &lt;li&gt;Oracle Netbean&amp;rsquo;s lead and all-around great guy Geertjan Wielenga and I were talking about integration with Spring Boot and Netbeans and &lt;a href="https://blogs.oracle.com/geertjan/entry/spring_boot_scenario_with_netbeans"&gt;he wrote up his play-by-play on a great Oracle blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;the Heroku documentation have &lt;a href="https://devcenter.heroku.com/articles/deploying-spring-boot-apps-to-heroku"&gt;recently updated to include a expanded discussion on deploying Spring Boot applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Our pal Michael Simmons has &lt;a href="https://github.com/michael-simons/wro4j-spring-boot-starter"&gt;developed a very useful-looking WRO4J Spring Boot starter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Dan Vega&amp;rsquo;s just put together a nice little &lt;a href="https://www.youtube.com/watch?v=MgOdvqvF6gk"&gt;video on how to send email with Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;our pal Petri Kainulainen&amp;rsquo;s back at it again with a nice post on getting the &lt;a href="http://www.petrikainulainen.net/programming/spring-framework/spring-batch-tutorial-getting-the-required-dependencies-with-gradle/"&gt;required dependencies from Maven for a Spring Batch application&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I like this Japanese-language post &lt;a href="https://matsumana.info/blog/2016/02/06/spring-boot-hikaricp-metrics/"&gt;on using the HikariCP from a Spring Boot application and on exposing its metrics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I &lt;em&gt;love&lt;/em&gt; this post from our very own &lt;a href="http://twitter.com/mkheck"&gt;Mark Heckler&lt;/a&gt; &lt;a href="http://www.thehecklers.org/2016/02/01/spring-boot-for-iot-developers-getting-started/"&gt;on Spring Boot for IoT developers&lt;/a&gt;. This is the first in a series, so stay tuned!&lt;/li&gt;
  &lt;li&gt;great post from &lt;a href="http://www.broadleafcommerce.com/blog/Preventing-Session-Hijacking-With-Spring"&gt;Broadleaf Commerce on preventing session hijacking with Spring&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: IoT Realized - The Connected Car v2</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/09/springone2gx-2015-replay-iot-realized-the-connected-car-v2" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2016-02-10:2375</id>
    <updated>2016-02-09T16:18:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX&lt;br/&gt;Presenters: Phil Berman, Michael Minella &amp;amp; Derrick Shields&lt;br/&gt;Big Data Track&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/iot-realized-the-connected-car-53122510"&gt;http://www.slideshare.net/SpringCentral/iot-realized-the-connected-car-53122510&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For this session we will explore the power of Spring XD in the context of the Internet of Things (IoT). We will look at a solution developed with Spring XD to stream real time analytics from a moving car using open standards. Ingestion of the real time data (location, speed, engine diagnostics, etc) into HDFS, analyzing it to provide highly accurate MPG and vehicle range prediction, as well as providing real time dashboards will all be covered. Coming out of this session, you’ll understand how Spring XD can serve as “Legos®” for the IoT. We&amp;rsquo;ve made some very cool updates to the app (multi-car support, uses Hadoop and Spark, and more). We also are hoping to be running our app on Cloud Foundry by the conference!&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/cejQ46IQpUI" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Spring Data REST - Data Meets Hypermedia + Security</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/09/springone2gx-2015-replay-spring-data-rest-data-meets-hypermedia-security" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2016-02-09:2374</id>
    <updated>2016-02-09T15:54:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015&lt;br/&gt;Presenters: Greg Turnquist &amp;amp; Roy Clarkson&lt;br/&gt;Data / Integration Track&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/spring-data-rest-data-meets-hypermedia-security"&gt;http://www.slideshare.net/SpringCentral/spring-data-rest-data-meets-hypermedia-security&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Check out Spring Data REST, a library than can rapidly bridge your data access layer to a RESTful interface using hypermedia. See how you can build the backend for your startup rapidly using top notch practices. We will then look at Spring-A-Gram, a sample application built with Spring Data REST and secured by Spring Security. Snap pictures from your laptop or smartphone and upload them to the server with little effort.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/s9Cd3-0gYKA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: HTTP/2 for the Web developer</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/09/springone2gx-2015-replay-http-2-for-the-web-developer" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2016-02-09:2373</id>
    <updated>2016-02-09T15:51:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015&lt;br/&gt;Presenter: Brian Clozel&lt;br/&gt;Web / Javascript Track&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/http2-for-the-web-developer"&gt;http://www.slideshare.net/SpringCentral/http2-for-the-web-developer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The HTTP/2 spec is here - clients are servers are racing to implement it, while browser support is increasing everyday&amp;hellip; The JVM world is already working on it in the Servlet 4.0 and JDK9 specs. But we developers, are still trying to understand the implications of it.&lt;/p&gt;
&lt;p&gt;Should we reconsider the way we build JavaScript applications and optimize them for front-end performance? Will our server application have new roles and abilities?&lt;/p&gt;
&lt;p&gt;In this talk we&amp;rsquo;ll look at the main features of HTTP/2 to understand how it will dramatically improve latency on the web. We&amp;rsquo;ll also discuss with concrete examples how HTTP/2 could be integrated in our front-end and Spring Web applications.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/6w3ZwK7mzh0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>Reactive Spring</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/09/reactive-spring" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Rossen Stoyanchev</name>
    </author>
    <id>tag:spring.io,2016-02-08:2371</id>
    <updated>2016-02-09T10:02:00Z</updated>
    <content type="html">&lt;p&gt;At SpringOne2GX 2015, Juergen &lt;a href="http://www.infoq.com/news/2015/09/spring-43-5"&gt;announced plans&lt;/a&gt; for Spring Framework 5 with a major focus on reactive architectures. Concrete efforts are already underway and a lot has happened since!&lt;/p&gt;
&lt;p&gt;At the most basic level, reactive programming models allow for writing non-blocking services and applications. This requires a fundamental shift from writing imperative logic to async, non-blocking, functional-style code, in particular when interacting with external resources.&lt;/p&gt;&lt;h3&gt;&lt;a href="#reactive-web-applications" class="anchor" name="reactive-web-applications"&gt;&lt;/a&gt;Reactive Web Applications&lt;/h3&gt;
&lt;p&gt;Most Java web applications are built on the Servlet API which was originally created with synchronous and blocking semantics. Over the years, support for asynchronous requests (Servlet 3.0) and non-blocking I/O (Servlet 3.1) was added. In Spring MVC, we&amp;rsquo;ve found that it is feasible to add selective async HTTP request handling to existing applications. However, we&amp;rsquo;ve also found that it is very hard to introduce non-blocking I/O within an existing ecosystem of web frameworks and applications. Doing so requires very deep change all the way to the core contracts which need to switch from blocking to async semantics.&lt;/p&gt;
&lt;p&gt;One reason for the continued popularity of Spring MVC is its intuitive, annotation-based programming model based on flexible controller method signatures. Fortunately, the same can continue to serve as a foundation for reactive web applications. This is the direction for the &lt;a href="https://github.com/spring-projects/spring-reactive"&gt;Spring Reactive&lt;/a&gt; effort where you will find a &lt;a href="https://github.com/spring-projects/spring-reactive/blob/545325dbf5d04c30aaedf25b4da1f7b97650d33f/src/test/java/org/springframework/web/reactive/method/annotation/RequestMappingIntegrationTests.java#L464"&gt;TestController&lt;/a&gt; that looks like any Spring MVC controller but runs on a new reactive engine with integration tests against Tomcat, Jetty, Undertow, and Netty. Note that this project will get merged into the Spring Framework master branch shortly after the 4.3 release in May, in preparation for the 5.0 M1 release in June.&lt;/p&gt;&lt;h3&gt;&lt;a href="#reactive-foundation" class="anchor" name="reactive-foundation"&gt;&lt;/a&gt;Reactive Foundation&lt;/h3&gt;
&lt;p&gt;A key ingredient to this effort is the &lt;a href="https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.0/README.md#specification"&gt;Reactive Streams spec&lt;/a&gt; whose purpose is to provide a &lt;em&gt;&amp;ldquo;standard for asynchronous stream processing with non-blocking backpressure&amp;rdquo;&lt;/em&gt;. The spec enables interop among disparate async component providers: from HTTP servers to web frameworks, database drivers, etc. It will be included in JDK 9 as &lt;a href="http://download.java.net/jdk9/docs/api/java/util/concurrent/Flow.html"&gt;java.util.concurrent.Flow&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The spec is small and consists of 4 interfaces, some rules, and a TCK. To expose it as an API however requires infrastructure around it for composing asynchronous logic. Spring Reactive uses &lt;a href="https://github.com/reactor/reactor-core"&gt;Reactor Core&lt;/a&gt;, a small and focused library which serves as a foundation for libraries and frameworks that want to build on Reactive Streams. For those who may be familiar with &lt;a href="http://projectreactor.io/"&gt;Project Reactor&lt;/a&gt;, a lot has happened over the past 6-8 months leading up to this week&amp;rsquo;s release of Reactor Core 2.5 M1, which &lt;a href="https://twitter.com/smaldini"&gt;Stephane Maldini&lt;/a&gt; will provide a full update on soon. &lt;/p&gt;
&lt;p&gt;Stay tuned for further blog posts on reactive programming from different Spring projects. Also, expect some reactive buzz at this year&amp;rsquo;s &lt;a href="http://www.springio.net/"&gt;Spring I/O&lt;/a&gt; conference in beautiful Barcelona!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Orchestrating Work with Activiti and Spring Integration</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/07/orchestrating-work-with-activiti-and-spring-integration" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2016-02-07:2370</id>
    <updated>2016-02-07T00:00:00Z</updated>
    <content type="html">&lt;p&gt;I received an email recently that asked about how to forward control from a wait-state in an Activiti (which is an open-source BPMN2 workflow engine from Alfresco) to a Spring Integration flow and then resume execution of the Activiti workflow process upon completion of some work in Spring Integration.&lt;/p&gt;
&lt;p&gt;To really appreciate why this is useful goal, we need some background.&lt;/p&gt;&lt;h2&gt;&lt;a href="#what-is-activiti" class="anchor" name="what-is-activiti"&gt;&lt;/a&gt;What is Activiti&lt;/h2&gt;
&lt;p&gt;Activiti is a &lt;em&gt;business process engine&lt;/em&gt;. It&amp;rsquo;s basically a directed graph of nodes (states) that model the states of a complex business process. It keeps track of the progression of work described in a business process. It describe automatic- and human-based actors in a system. It also supports interrogating the business process engine to ask questions about the process instances underway: how many of them are there, which ones are stalled, etc. Business Process Management Systems (BPMS) offer many advantages, some of which are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;collaborative processes where humans and services are used to drive towards a larger business requirement (imagine loan approval, legal compliance, document revision, etc)&lt;/li&gt;
  &lt;li&gt;they support auditing and journaling of important business processes in an organization. This is invaluable in regulatory environments.&lt;/li&gt;
  &lt;li&gt;a BPM engine is &lt;em&gt;designed&lt;/em&gt; to handle long running process state, this means your domain model no longer needs to be riddled with process-state specific fields like &lt;code&gt;is_enrolled&lt;/code&gt; or &lt;code&gt;reset_password_date&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;ease-of-modeling complex business processes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This last point merits some focus: a good BPM engine like Activiti supports visually modeling business processes. UML supports visually describing processes using activities (steps) and swimlanes (agents involved in satisfying those steps). UML, of course, is just a modeling tool. It has no runtime semantics. The holy grail of business process management has been to have a modeling notation that could be used by business analysts &lt;em&gt;and&lt;/em&gt; application developers. &lt;a href="https://en.wikipedia.org/wiki/Business_Process_Model_and_Notation"&gt;BPMN 2&lt;/a&gt; is as as close as we&amp;rsquo;ve come towards achieving that goal.&lt;/p&gt;
&lt;p&gt;Here, for example, is a visual model of a &lt;em&gt;very&lt;/em&gt; simple business process.&lt;/p&gt;
&lt;img src="https://raw.githubusercontent.com/joshlong/meh/master/bpmn-model.png" width="500"/&gt;
&lt;p&gt;And here is the standard XML markup that&amp;rsquo;s been created to support that model. This XML has execution semantics, not &lt;em&gt;just&lt;/em&gt; modeling semantics.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&#xD;
&amp;lt;definitions id=&amp;quot;definitions&amp;quot;&#xD;
             xmlns=&amp;quot;http://www.omg.org/spec/BPMN/20100524/MODEL&amp;quot;&#xD;
             xmlns:activiti=&amp;quot;http://activiti.org/bpmn&amp;quot;&#xD;
             typeLanguage=&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot;&#xD;
             expressionLanguage=&amp;quot;http://www.w3.org/1999/XPath&amp;quot;&#xD;
             targetNamespace=&amp;quot;http://www.activiti.org/bpmn2.0&amp;quot;&amp;gt;&#xD;
&#xD;
    &amp;lt;process id=&amp;quot;asyncProcess&amp;quot;&amp;gt;&#xD;
&#xD;
        &amp;lt;startEvent id=&amp;quot;start&amp;quot;/&amp;gt;&#xD;
&#xD;
          &amp;lt;sequenceFlow&#xD;
            id=&amp;quot;flow1&amp;quot;&#xD;
            sourceRef=&amp;quot;start&amp;quot;&#xD;
            targetRef=&amp;quot;sigw&amp;quot;/&amp;gt;&#xD;
&#xD;
        &amp;lt;serviceTask &#xD;
            id=&amp;quot;sigw&amp;quot;&#xD;
           name=&amp;quot;Delegate to Spring Integration&amp;quot;&#xD;
           activiti:delegateExpression=&amp;quot;#{gateway}&amp;quot;/&amp;gt;&#xD;
&#xD;
           &amp;lt;sequenceFlow&#xD;
            id=&amp;quot;scriptFlow&amp;quot;&#xD;
            sourceRef=&amp;quot;sigw&amp;quot;&#xD;
            targetRef=&amp;quot;confirmMovementTask&amp;quot;/&amp;gt;&#xD;
&#xD;
        &amp;lt;scriptTask &#xD;
            id=&amp;quot;confirmMovementTask&amp;quot;&#xD;
            name=&amp;quot;Execute script&amp;quot; scriptFormat=&amp;quot;groovy&amp;quot;&amp;gt;&#xD;
            &amp;lt;script&amp;gt;&#xD;
                println &amp;#39;Moving on..&amp;#39;&#xD;
            &amp;lt;/script&amp;gt;&#xD;
        &amp;lt;/scriptTask&amp;gt;&#xD;
&#xD;
          &amp;lt;sequenceFlow&#xD;
            id=&amp;quot;flow2&amp;quot;&#xD;
            sourceRef=&amp;quot;confirmMovementTask&amp;quot;&#xD;
            targetRef=&amp;quot;theEnd&amp;quot;/&amp;gt;&#xD;
&#xD;
        &amp;lt;endEvent id=&amp;quot;theEnd&amp;quot;/&amp;gt;&#xD;
&#xD;
    &amp;lt;/process&amp;gt;&#xD;
&#xD;
&amp;lt;/definitions&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Most analysts won&amp;rsquo;t write this XML by hand. Instead, they&amp;rsquo;ll use a modeling tool like &lt;a href="https://www.alfresco.com/products/business-process-management"&gt;Alfresco&amp;rsquo;s Activiti Cloud&lt;/a&gt;. The XML artifact, however, is round-trippable: it may be annotated by developers and then revised in the modeling tool.&lt;/p&gt;
&lt;p&gt;On inspection, though, you&amp;rsquo;ll see that most of this isn&amp;rsquo;t very complicated. The process has four states:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;startEvent&lt;/code&gt;&lt;/strong&gt; - where the process starts&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;serviceTask&lt;/code&gt;&lt;/strong&gt; - invoke the Spring bean called &lt;code&gt;gateway&lt;/code&gt; to kick off a bit of processing in Spring Integration (more on this later!)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;scriptTask&lt;/code&gt;&lt;/strong&gt; - print out a simple confirmational message using Groovy&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;endEvent&lt;/code&gt;&lt;/strong&gt; - done&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The ordering is explicitly spelled out by the various &lt;code&gt;sequenceFlow&lt;/code&gt; elements which connect the nodes.&lt;/p&gt;
&lt;p&gt;Activiti is a great way to keep track of business process state, but it&amp;rsquo;s not a particularly powerful component model or integration technology. For that we need an integration framework like Spring Integration..&lt;/p&gt;&lt;h2&gt;&lt;a href="#what-is-spring-integration" class="anchor" name="what-is-spring-integration"&gt;&lt;/a&gt;What is Spring Integration&lt;/h2&gt;
&lt;p&gt;Spring Integration supports the integration of services and data across multiple otherwise incompatible systems. Conceptually, composing an integration flow is similar to composing a pipes-and-filters flow on a UNIX OS with &lt;code&gt;stdin&lt;/code&gt; and &lt;code&gt;stdout&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;cat input.txt |  grep ERROR | wc -l &amp;gt; output.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the example, we take data from a source (the file &lt;code&gt;input.txt&lt;/code&gt;), pipe it to the &lt;code&gt;grep&lt;/code&gt; command to filter the results and keep only the lines that contain the token &lt;code&gt;ERROR&lt;/code&gt;, and then pipe it to the &lt;code&gt;wc&lt;/code&gt; utility which we to count how many lines there are. Finally, the final count is written to an output file, &lt;code&gt;output.txt&lt;/code&gt;. These components - &lt;code&gt;cat&lt;/code&gt;, &lt;code&gt;grep&lt;/code&gt;, and &lt;code&gt;wc&lt;/code&gt; - know nothing of each other. They were not designed with each other in mind. Instead, they know only how to read from &lt;code&gt;stdin&lt;/code&gt; and write to &lt;code&gt;stdout&lt;/code&gt;. This normalization of data makes it very easy to compose complex solutions from simple atoms. In the example, the act of &lt;code&gt;cat&lt;/code&gt;ing a file turns data into data that any process aware of &lt;code&gt;stdin&lt;/code&gt; can read. It &lt;em&gt;adapts&lt;/em&gt; the inbound data into the normalized format, lines of strings. At the end, the redirect (&lt;code&gt;&amp;gt;&lt;/code&gt;) operator turns the normalized data, lines of strings, into data on the file system. It &lt;em&gt;adapts&lt;/em&gt; it. The pipe (&lt;code&gt;|&lt;/code&gt;) character is used to signal that the output of one component should flow to the input of another.&lt;/p&gt;
&lt;p&gt;A Spring Integration flow works the same way: data is normalized into &lt;code&gt;Message&amp;lt;T&amp;gt;&lt;/code&gt; instances. Each &lt;code&gt;Message&amp;lt;T&amp;gt;&lt;/code&gt; has a payload and headers - metadata about the payload in a &lt;code&gt;Map&amp;lt;K,V&amp;gt;&lt;/code&gt; - that are the input and output of different messaging components. These messaging components are typically provided by Spring Integration, but it&amp;rsquo;s easy to write and use your own. There are all manner of messaging components supporting all of the &lt;a href="http://www.enterpriseintegrationpatterns.com/"&gt;the Enterprise Application Integration patterns&lt;/a&gt; (filters, routers, transformers, adapters, gateways, etc.). The Spring framework &lt;code&gt;MessageChannel&lt;/code&gt; is a named conduit through which &lt;code&gt;Message&amp;lt;T&amp;gt;&lt;/code&gt;s flow between messaging components. They&amp;rsquo;re pipes and, by default, they work sort of like a &lt;code&gt;java.util.Queue&lt;/code&gt;. Data in, data out.&lt;/p&gt;
&lt;p&gt;Spring Integration inbound adapters &lt;em&gt;adapt&lt;/em&gt; data from external systems (message queues like RabbitMQ, Apache Kafka, and JMS, email, Twitter, file system mounts, IoT-devices, and a zillion other systems) into &lt;code&gt;Message&amp;lt;T&amp;gt;&lt;/code&gt;s. Spring Integration outbound adapters do the same, in reverse, taking &lt;code&gt;Message&amp;lt;T&amp;gt;&lt;/code&gt;s and writing them to an external system (for example, as an e-mail, or a Tweet, or an Apache Kafka message).&lt;/p&gt;
&lt;p&gt;Spring Integration supports &lt;em&gt;event-driven architectures&lt;/em&gt; because it can help detect and then respond to events in the external world. For example, you can use Spring Integration to poll a filesystem every 10 seconds and publish a &lt;code&gt;Message&amp;lt;T&amp;gt;&lt;/code&gt; whenever a new file appears. You can use Spring Integration to act as a listener to messages delivered to a Apache Kafka topic. The adapter handles responding to the external event and frees you from worrying too much about originating the message and lets you focus on handling the message once it arrives. It&amp;rsquo;s the integration equivalent of dependency injection! &lt;/p&gt;
&lt;p&gt;Dependency injection leaves component code free of worries about resource initialization and acquisition and leaves it free to focus on writing code with those dependencies. Where did the &lt;code&gt;javax.sql.DataSource&lt;/code&gt; field come from? Who cares! Spring wired it in, and it may have gotten it from a Mock in a test, from JNDI in a classic application server, or from a configured Spring Boot bean. Component code remains ignorant of those details. ~15 years ago, when we first started talking about dependency injection, we would talk about the &amp;ldquo;Hollywood principal:&amp;rdquo; &amp;ldquo;don&amp;rsquo;t call me, I&amp;rsquo;ll call you!&amp;rdquo; This applies even more to Spring Integration!&lt;/p&gt;
&lt;p&gt;Inbound gateways take incoming requests from external systems, process them as &lt;code&gt;Message&amp;lt;T&amp;gt;&lt;/code&gt;s, and send a reply. Outbound gateways take &lt;code&gt;Message&amp;lt;T&amp;gt;&lt;/code&gt;s, forward them to an external system, and await the response from that system. They support request and reply interactions.&lt;/p&gt;&lt;h2&gt;&lt;a href="#an-activiti-and-spring-integration-gateway" class="anchor" name="an-activiti-and-spring-integration-gateway"&gt;&lt;/a&gt;An Activiti and Spring Integration Gateway&lt;/h2&gt;
&lt;p&gt;Activiti can be used to describe a complex, long-running process in terms of recorded, auditable, and predictable states, and Spring Integration can be used to, well, &lt;em&gt;integrate&lt;/em&gt;! Spring Integration is where we keep the interesting Java code, and Activiti keeps track of the overarching state. This trick was useful 20 years ago and it&amp;rsquo;s useful today in the massively distributed world of microservices, too, where processing for a single request may span multiple services and nodes. It&amp;rsquo;s convenient, then, &lt;a href="https://spring.io/blog/2015/03/08/getting-started-with-activiti-and-spring-boot"&gt;that Spring Boot, Spring Integration and Activiti work so well together&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;One common use case is to initiate a BPM process with Activiti and then, on entering a wait-state, delegate handling of that state to Spring Integration which can, of course, spread the work to other systems. Here&amp;rsquo;s a simple diagram illustrating the flow.&lt;/p&gt;
&lt;img src="https://raw.githubusercontent.com/joshlong/meh/master/activiti-and-si-interaction.jpg" width="500"/&gt;
&lt;p&gt;BPM process states can often involve human agents. For example, a workflow engine may have a state where a document is sent to a human for approval, but the reviewer is on vacation and won&amp;rsquo;t be back for weeks. It would be wasteful, not to mention dangerous, to keep a thread open with the expectation that whatever confirmation is needed to continue processing will come back within milliseconds or seconds.&lt;/p&gt;
&lt;p&gt;Activiti is smart enough to pause execution, persist execution state to a database during a wait-state, and only resume upon having the process execution &lt;em&gt;signaled&lt;/em&gt;. Signalling the process engine rehydrates the process and resumes execution. A simple example might be a new user enrollment business process that delegates to Spring Integration to send an email with a sign up confirmation link. It may take days for the user to click the confirmation link, but on clicking, the system should proceed with the enrollment business process.&lt;/p&gt;
&lt;p&gt;In this post we&amp;rsquo;re going to look at how to initiate a BPM process that enters a wait-state and then delegates to Spring Integration to do some kind of custom processing and then, in the far flung future, resumes execution of the process.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll setup two Spring Integration flows: one to handle requests from Activiti into Spring Integration and another that handles eventual replies and triggers the resumption of the process.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll need something to kick off our process, so here&amp;rsquo;s a simple REST endpoint (&lt;code&gt;http://localhost:8080/start&lt;/code&gt;) that launches a new process each time:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@RestController&#xD;
class ProcessStartingRestController {&#xD;
&#xD;
 @Autowired&#xD;
 private ProcessEngine processEngine;&#xD;
&#xD;
 @RequestMapping(method = RequestMethod.GET, value = &amp;quot;/start&amp;quot;)&#xD;
 Map&amp;lt;String, String&amp;gt; launch() {&#xD;
  ProcessInstance asyncProcess = this.processEngine.getRuntimeService()&#xD;
    .startProcessInstanceByKey(&amp;quot;asyncProcess&amp;quot;);&#xD;
  return Collections.singletonMap(&amp;quot;executionId&amp;quot;, asyncProcess.getId());&#xD;
 }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Messages will flow across two &lt;code&gt;MesssageChannel&lt;/code&gt;s that we&amp;rsquo;ll create in a &lt;code&gt;@Configuration&lt;/code&gt; class: &lt;code&gt;requests&lt;/code&gt; and &lt;code&gt;replies&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Configuration&#xD;
class MessageChannels {&#xD;
&#xD;
 @Bean&#xD;
 DirectChannel requests() {&#xD;
  return new DirectChannel();&#xD;
 }&#xD;
&#xD;
 @Bean&#xD;
 DirectChannel replies() {&#xD;
  return new DirectChannel();&#xD;
 }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The nice thing about using a &lt;code&gt;@Configuration&lt;/code&gt; class is that it is itself a Spring component and can be injected anywhere. We can dereference the channels by invoking the &lt;code&gt;@Bean&lt;/code&gt; provider methods directly. The alternative is to use &lt;code&gt;@Qualifier&lt;/code&gt; everytime we inject a reference to one of the channels, e.g.:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;&lt;br/&gt;public static final String REPLIES_CHANNEL_NAME = &amp;quot;replies&amp;quot;;&#xD;
&#xD;
@Autowired&#xD;
@Qualifier(REPLIES_CHANNEL_NAME)&#xD;
private MessageChannel replies;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our BPMN is pretty straightforward, but we&amp;rsquo;ll use an Activiti-specific namespace attribute, &lt;code&gt;activiti:delegateExpression=&amp;quot;#{gateway}&amp;quot;&lt;/code&gt;, to tell Activiti to call a bean named &lt;code&gt;gateway&lt;/code&gt; that&amp;rsquo;s registered in Spring. Activiti knows to do this because this application uses the Activiti auto-configuration for Spring Boot which, among many other things, exposes Spring-managed beans to the Activiti expression-language. The &lt;code&gt;gateway&lt;/code&gt; is an Activiti-based bean of type &lt;code&gt;ReceiveTaskActivityBehavior&lt;/code&gt;. Spring Boot has auto-configurations for both Spring Integration and Activiti so 90% of the tedious setup goes out the window.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at our simple &lt;code&gt;gateway&lt;/code&gt; component, an implementation of Activiti&amp;rsquo;s &lt;code&gt;ActivityBehavior&lt;/code&gt; interface that acts as a callback where we can send a &lt;code&gt;Message&amp;lt;T&amp;gt;&lt;/code&gt; into the &lt;code&gt;requests&lt;/code&gt; channel and kick off our Spring Integration flow. The important thing here is that we&amp;rsquo;ve captured the &lt;code&gt;executionId&lt;/code&gt; which we&amp;rsquo;ll need later to &lt;em&gt;resume&lt;/em&gt; or &lt;em&gt;signal&lt;/em&gt; the process.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Bean&#xD;
ActivityBehavior gateway(MessageChannels channels) {&#xD;
  return new ReceiveTaskActivityBehavior() {&#xD;
&#xD;
    @Override&#xD;
    public void execute(ActivityExecution execution) throws Exception {&#xD;
&#xD;
      Message&amp;lt;?&amp;gt; executionMessage = MessageBuilder&#xD;
          .withPayload(execution)&#xD;
          .setHeader(&amp;quot;executionId&amp;quot;, execution.getId())&#xD;
          .build();&#xD;
&#xD;
      channels.requests().send(executionMessage);&#xD;
    }&#xD;
  };&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;Message&amp;lt;T&amp;gt;&lt;/code&gt; will pop out the other side of the &lt;code&gt;requests&lt;/code&gt; &lt;code&gt;MessageChannel&lt;/code&gt; and something needs to process it. In a sophisticated example, it&amp;rsquo;d be trivial to transform the request into a meaningful message and then, for example, forward it to some other system like e-mail. Here, we just print out the headers so that we can note the &lt;code&gt;executionId&lt;/code&gt; and use that later.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Bean&#xD;
IntegrationFlow requestsFlow(MessageChannels channels) {&#xD;
 return IntegrationFlows.from(channels.requests())&#xD;
   .handle(msg -&amp;gt; msg.getHeaders().entrySet()&#xD;
     .forEach(e -&amp;gt; log.info(e.getKey() + &amp;#39;=&amp;#39; + e.getValue())))&#xD;
   .get();&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, the workflow definition will have been persisted and there is no active process instance. We need to signal it, somehow, asynchronously. We&amp;rsquo;ll do so using a REST endpoint, &lt;code&gt;http://localhost:8080/resume/{executionId}&lt;/code&gt;. REST is easy to grok, but really we could&amp;rsquo;ve used any event from any external system that Spring Integration knows about to achieve this effect. The only thing to ensure is that, whatever the external event, we&amp;rsquo;re somehow able to send the &lt;code&gt;executionId&lt;/code&gt; along, as we do here by capturing it in the URI.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;&lt;br/&gt;@RestController&#xD;
class ProcessResumingRestController {&#xD;
&#xD;
 @Autowired&#xD;
 private MessageChannels messageChannels;&#xD;
&#xD;
 @RequestMapping(method = RequestMethod.GET, value = &amp;quot;/resume/{executionId}&amp;quot;)&#xD;
 void resume(@PathVariable String executionId) {&#xD;
&#xD;
  Message&amp;lt;String&amp;gt; build = MessageBuilder.withPayload(executionId)&#xD;
    .setHeader(&amp;quot;executionId&amp;quot;, executionId)&#xD;
    .build();&#xD;
&#xD;
  this.messageChannels.replies().send(build);&#xD;
 }&#xD;
}&#xD;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the &lt;code&gt;Message&amp;lt;T&amp;gt;&lt;/code&gt; flows through the &lt;code&gt;replies&lt;/code&gt; &lt;code&gt;MessageChannel&lt;/code&gt;, it&amp;rsquo;ll pop out the other end and, again, something needs to process it. Here, we&amp;rsquo;ll use another Spring Integration flow that takes the incoming &lt;code&gt;Message&amp;lt;T&amp;gt;&lt;/code&gt; and signals the resumption of the process. Once this flow is executed, you&amp;rsquo;ll see the next step in the process, the &lt;code&gt;scriptTask&lt;/code&gt;, evaluated and the words &amp;ldquo;Moving on!&amp;rdquo; printed to the console.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Bean&#xD;
IntegrationFlow repliesFlow(MessageChannels channels,&#xD;
       ProcessEngine engine) {&#xD;
 return IntegrationFlows.from(channels.replies())&#xD;
   .handle(msg -&amp;gt; engine.getRuntimeService().signal(&#xD;
     String.class.cast(msg.getHeaders().get(&amp;quot;executionId&amp;quot;))))&#xD;
   .get();&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="#next-steps" class="anchor" name="next-steps"&gt;&lt;/a&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ve covered a lot! We&amp;rsquo;re involving &lt;em&gt;both&lt;/em&gt; a BPM engine and an integration framework to handle processing, and I appreciate that the correct use of the intersection of the two is kind of a niche topic. The goal in this post was to effectively use both, where applicable, to the fullest. BPM adds a fair amount of &lt;a href="https://en.wikipedia.org/wiki/Cognitive_load"&gt;&lt;em&gt;cognitive load&lt;/em&gt;&lt;/a&gt; for simple integrations but offers a &lt;em&gt;lot&lt;/em&gt; of value when business process descriptions must be model- and business analyst-friendly. One common misconception is that developers have to give up the ability to enhance the system once BPM is involved; NOT SO! Thanks to Spring Boot and some hard work from the Activiti team, Activiti works perfectly with all of Spring.&lt;/p&gt;
&lt;p&gt;The real power is using BPM to orchestrate complex processing logic: imagine hitting a state in a BPM process and then invoking a Spring Batch job, or calling a REST service with a Ribbon load-balanced &lt;code&gt;RestTemplate&lt;/code&gt; in Spring Cloud, or forwarding the &lt;code&gt;Message&amp;lt;T&amp;gt;&lt;/code&gt; into a Spring Cloud Data Flow stream process. Spring Cloud Data Flow is one of my favorite approaches to data processing because it builds on Spring Cloud Stream which in turn builds on Spring Integration: it&amp;rsquo;s &lt;code&gt;MessageChannel&lt;/code&gt;s all the way down!&lt;/p&gt;
&lt;p&gt;The code for &lt;a href="https://github.com/joshlong/activiti-examples/tree/master/async-activiti-integration"&gt;the example is online&lt;/a&gt;. &lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud Stream 1.0.0.M4 is now available</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/06/spring-cloud-stream-1-0-0-m4-is-now-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>Marius Bogoevici</name>
    </author>
    <id>tag:spring.io,2016-02-04:2369</id>
    <updated>2016-02-06T00:07:58Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team, I am pleased to announce the release of &lt;a href="http://cloud.spring.io/spring-cloud-stream/"&gt;Spring Cloud Stream 1.0.0.M4&lt;/a&gt;. The new release comes with a few major changes and enhancements, and it defines core abstractions and primitives that we believe to be essential for the development of distributed real-time data processing applications. To name some of them:&lt;/p&gt;&lt;h4&gt;&lt;a href="#default-publish-subscribe-semantics" class="anchor" name="default-publish-subscribe-semantics"&gt;&lt;/a&gt;Default publish-subscribe semantics&lt;/h4&gt;
&lt;p&gt;The most important change in Spring Cloud Stream 1.0.0.M4 is the way in which applications interact with each other. We have opted for a default publish-subscribe model, in which each application that receives messages from a given destination will receive a copy of the message. This is a better fit for the processing model of stream applications, where intermediate topics act as data hubs for the various intersecting data streams, also making scenarios such as tapping easier and more efficient. This feature goes hand in hand with the next, which is &lt;a href="http://docs.spring.io/spring-cloud-stream/docs/1.0.0.M4/reference/htmlsingle/index.html#_consumer_group_support"&gt;consumer groups&lt;/a&gt;.&lt;/p&gt;&lt;h4&gt;&lt;a href="#consumer-groups-for-load-balancing-and-partitioning" class="anchor" name="consumer-groups-for-load-balancing-and-partitioning"&gt;&lt;/a&gt;Consumer groups for load balancing and partitioning&lt;/h4&gt;
&lt;p&gt;Of course, if there are multiple instances of a given application, we want them to act as competing or partitioned consumers - messages should be sent to one and only one of the instances that run in parallel. This can be done now in Spring Cloud Stream 1.0.0.M4 by the use of &lt;a href="http://docs.spring.io/spring-cloud-stream/docs/1.0.0.M4/reference/htmlsingle/index.html#_consumer_group_support"&gt;consumer groups&lt;/a&gt;. Input bindings may specify a consumer group at runtime, e.g. &lt;code&gt;spring.cloud.stream.bindings.input.group=myGroup&lt;/code&gt;. If multiple applications do so, they become part of the same group and messages will be distributed between them, either via a load-balancing or a partitioning strategy (controlled by a different set of configuration). This concept has been inspired by Kafka, but different binder implementations have different &lt;a href="http://docs.spring.io/spring-cloud-stream/docs/1.0.0.M4/reference/htmlsingle/index.html#_binder_spi"&gt;approaches&lt;/a&gt; to providing this feature, and this is a first class concept in the framework. &lt;/p&gt;&lt;h4&gt;&lt;a href="#binder-spi-simplifications" class="anchor" name="binder-spi-simplifications"&gt;&lt;/a&gt;Binder SPI simplifications&lt;/h4&gt;
&lt;p&gt;While not exposed to the general user, the Binder SPI is an important part of Spring Cloud Stream, and ensures that the framework remains flexible and extensible. In this release, we have taken radical steps of &lt;a href="https://github.com/spring-cloud/spring-cloud-stream/blob/master/spring-cloud-stream/src/main/java/org/springframework/cloud/stream/binder/Binder.java"&gt;simplifying&lt;/a&gt; the SPI, making it easier for developers to create their own implementations, if necessary, besides the already provided Kafka, Rabbit and Redis. (As a fair warning, we are planning a few more changes to the Binder SPI, before the RC release). &lt;/p&gt;&lt;h4&gt;&lt;a href="#kafka-binder-offset-resetting-and-start-offset-control" class="anchor" name="kafka-binder-offset-resetting-and-start-offset-control"&gt;&lt;/a&gt;Kafka binder offset resetting and start offset control&lt;/h4&gt;
&lt;p&gt;The Kafka binder now supports resetting offsets at start via the &lt;code&gt;spring.cloud.stream.binder.kafka.resetOffsets&lt;/code&gt; property, allowing an application to resume consumption from either the beginning or the end of the partitions it subscribes to, via the &lt;code&gt;spring.cloud.stream.binder.kafka.startOffset&lt;/code&gt; property which can be set either to &lt;code&gt;earliest&lt;/code&gt; or &lt;code&gt;latest&lt;/code&gt; offset. The latter can be used for controlling the starting offset of a newly launched application.&lt;/p&gt;&lt;h4&gt;&lt;a href="#health-indicator-support" class="anchor" name="health-indicator-support"&gt;&lt;/a&gt;Health indicator support&lt;/h4&gt;
&lt;p&gt;Spring Cloud Stream now takes advantage of the Spring Boot&amp;rsquo;s application health management support, by exposing a &lt;a href="http://docs.spring.io/spring-cloud-stream/docs/1.0.0.M4/reference/htmlsingle/index.html#_health_indicator"&gt;health indicator&lt;/a&gt; for the binders, reflecting the status of the middleware connection. This feature is currently supported for Rabbit and Redis, and is particularly important if the binders use a different connection than the default one provided by Boot. &lt;/p&gt;
&lt;p&gt;The whole list of enhancements and fixes can be viewed in &lt;a href="https://github.com/spring-cloud/spring-cloud-stream/issues?q=milestone%3A1.0.0.M4+is%3Aclosed"&gt;GitHub&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://cloud.spring.io/spring-cloud-stream"&gt;Spring Cloud Stream&lt;/a&gt; is a core component of &lt;a href="http://cloud.spring.io/spring-cloud-dataflow/"&gt;Spring Cloud Data Flow&lt;/a&gt; along with &lt;a href="http://cloud.spring.io/spring-cloud-task/"&gt;Spring Cloud Task&lt;/a&gt;, and provides the foundation for &lt;a href="http://cloud.spring.io/spring-cloud-bus/"&gt;Spring Cloud Bus&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And, as always, we welcome feedback: either in &lt;a href="https://github.com/spring-cloud/spring-cloud-stream"&gt;GitHub&lt;/a&gt;, on &lt;a href="http://stackoverflow.com/questions/tagged/spring-cloud"&gt;Stack Overflow&lt;/a&gt;, or on &lt;a href="https://twitter.com/springcentral"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - February 2nd, 2016</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/02/this-week-in-spring-february-2nd-2016" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2016-02-02:2363</id>
    <updated>2016-02-02T13:34:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installment of &lt;em&gt;This Week in Spring!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This week I&amp;rsquo;m off to the &lt;a href="http://microxchg.io/2016/index.html"&gt;Microxchg&lt;/a&gt; conference in Berlin, Germany, to generally bring the Spring and talk about microservices. Then, it&amp;rsquo;s off to Stockholm, Sweden for &lt;a href="http://www.jfokus.se/jfokus/"&gt;JFokus&lt;/a&gt;! As usual, if you&amp;rsquo;re in either of those places, &lt;a href="http://twitter.com/starbuxman"&gt;hit me up&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;This week we&amp;rsquo;ve got a lot to cover so let&amp;rsquo;s get to it!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Batch lead Michael Minella has just announced a new project, &lt;a href="http://spring.io/blog/2016/01/27/introducing-spring-cloud-task"&gt;Spring Cloud Task&lt;/a&gt;. Spring Cloud Task provides the ability to run, manage and distribute ad-hoc tasks in the same way you can run batch &lt;code&gt;Job&lt;/code&gt;s with Spring Batch. There are some exciting integrations possible with Spring StateMachine and Spring Cloud Dataflow, so read this post and stay tuned!&lt;/li&gt;
  &lt;li&gt;you might enjoy this German-language JAXenter &lt;a href="https://jaxenter.de/spring-cloud-task-kurzlebige-microservices-33925"&gt;post on Spring Cloud Task&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Security lead Rob Winch has a nice post on security with Angular.js titled, &lt;a href="http://spring.io/blog/2016/01/28/angularjs-escaping-the-expression-sandbox-for-xss"&gt;&lt;em&gt;Angular.js: Escaping the Expression Sandbox for XSS&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Integration committer (and, yes, ninja) and &lt;a href="http://spring.io/blog/2016/01/28/java-dsl-for-spring-integration-1-1-2-is-available-now"&gt;Spring Integration Java Config DSL lead Artem Bilan has just announced Spring Integration 1.1.2&lt;/a&gt; which includes updates and bug fixes.&lt;/li&gt;
  &lt;li&gt;Spring IO Platform lead Andy Wilkinson&amp;rsquo;s just &lt;a href="http://spring.io/blog/2016/02/01/spring-io-platform-2-0-2-release"&gt;released Spring IO Platform 2.0.2&lt;/a&gt; which adds the latest maintenance releases for several projects&lt;/li&gt;
  &lt;li&gt;SpringOne2GX 2015 replay: &lt;a href="https://spring.io/blog/2016/02/02/springone2gx-2015-replay-implementing-a-highly-scalable-stock-prediction-system-with-r-apache-geode-and-spring-xd"&gt;Implementing a Highly Scalable Stock Prediction System with R, Apache Geode and Spring XD&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;SpringOne2GX 2015 replay: &lt;a href="https://spring.io/blog/2016/02/02/springone2gx-2015-replay-spring-boot-is-made-for-tooling"&gt;Spring Boot is made for tooling&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;SpringOne2GX 2015 replay: &lt;a href="https://spring.io/blog/2016/02/02/springone2gx-2015-replay-building-highly-scalable-spring-applications-with-in-memory-distributed-data"&gt;Building Highly-Scalable Spring Applications with In-Memory, Distributed Data&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;SpringOne2GX 2015 replay: &lt;a href="https://spring.io/blog/2016/02/02/springone2gx-2015-replay-introduction-to-reactive-programming"&gt;Introduction to Reactive Programming&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I really enjoyed &lt;a href="http://yetanotherdevblog.com/introduction_to_spring_restdocs"&gt;Stathis Souris&amp;rsquo;s post on using Spring REST Docs&lt;/a&gt;: it&amp;rsquo;s thorough, progresses linearly and nicely, and it&amp;rsquo;s up-to-date. Well done!&lt;/li&gt;
  &lt;li&gt;our pal Biju Kunjummen&amp;rsquo;s put together a nice post &lt;a href="http://www.javacodegeeks.com/2016/02/spring-cloud-ribbon-making-secured-call.html"&gt;on using Spring Cloud Ribbon to make secured calls to another service&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;our pal Petri Kainulainen is back at it again, this time with the &lt;a href="http://www.petrikainulainen.net/programming/spring-framework/spring-batch-tutorial-getting-the-required-dependencies-with-maven/"&gt;second installment of his series on Spring Batch&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;if you &lt;em&gt;must&lt;/em&gt; stand up a new application today without Spring Boot, then you might look at &lt;a href="http://blog.codeleak.pl/2016/01/spring-mvc-4-quickstart-maven-archetype.html"&gt;Rafa? Borowiec&lt;/a&gt;&amp;rsquo;s Maven archetype. But, (_gulp_!) please don&amp;rsquo;t stand up a new application without Spring Boot!&lt;/li&gt;
  &lt;li&gt;I loved this forum post on the good &amp;rsquo;ol JavaRanch in which our very own Craig Walls, lead of Spring Social and author of the recently released and epic &lt;em&gt;Spring Boot in Action&lt;/em&gt;, answers the question: &lt;a href="http://www.coderanch.com/t/661254/Spring/Spring-Boot-Spring-Projects"&gt;How does Spring Boot relate to other Spring projects&lt;/a&gt;? Check it out!&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Implementing a Highly Scalable Stock Prediction System with R, Apache Geode and Spring XD</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/02/springone2gx-2015-replay-implementing-a-highly-scalable-stock-prediction-system-with-r-apache-geode-and-spring-xd" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2016-02-02:2366</id>
    <updated>2016-02-02T13:33:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015.&lt;br/&gt;Presenters: Fred Melo &amp;amp; William Markito Oliveira&lt;br/&gt;Big Data Track&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/implementing-a-highly-scalable-stock-prediction-system-with-r-apache-geode-and-spring-xd"&gt;http://www.slideshare.net/SpringCentral/implementing-a-highly-scalable-stock-prediction-system-with-r-apache-geode-and-spring-xd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Finance market prediction has always been one of the hottest topics in Data Science and Machine Learning. However, the prediction algorithm is just a small piece of the puzzle. Building a data stream pipeline that is constantly combining the latest price info with high volume historical data is extremely challenging using traditional platforms, requiring a lot of code and thinking about how to scale or move into the cloud. This session is going to walk-through the architecture and implementation details of an application built on top of open-source tools that demonstrate how to easily build a stock prediction solution with no source code - except a few lines of R and the web interface that will consume data through a RESTful endpoint, real-time. The solution leverages in-memory data grid technology for high-speed ingestion, combining streaming of real-time data and distributed processing for stock indicator algorithms.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/0btWBAWnz20" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Spring Boot is made for tooling</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/02/springone2gx-2015-replay-spring-boot-is-made-for-tooling" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2016-02-02:2367</id>
    <updated>2016-02-02T13:33:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015.&lt;br/&gt;Presenters:Yann Cébron - JetBrains, Stéphane Nicoll, Pivotal&lt;br/&gt;Core Spring Track&lt;br/&gt;Slides: no slides all demo&lt;/p&gt;
&lt;p&gt;For many years, IntelliJ IDEA has been widely used in projects employing the Spring Framework. The latest version of the IDE (14.1) now ships with dedicated Spring Boot support. In this practical presentation we&amp;rsquo;re going to look at some features from IntelliJ IDEA that will help you not only get started with Spring Boot but also guide you along the way, helping with coding and configuration management for your application. As a bonus, we&amp;rsquo;ll also discover some nice hidden tips and tricks you might not know yet. This talk is all about being more efficient when writing code.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/IHZ0d3MBb0g" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Building Highly-Scalable Spring Applications with In-Memory, Distributed Data</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/02/springone2gx-2015-replay-building-highly-scalable-spring-applications-with-in-memory-distributed-data" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2016-02-02:2365</id>
    <updated>2016-02-02T13:24:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015.&lt;br/&gt;Speakers: John Blum &amp;amp; Luke Shannon&lt;br/&gt;Data/Integration Track&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/building-highly-scalable-spring-applications-using-inmemory-data-grids-53086251"&gt;http://www.slideshare.net/SpringCentral/building-highly-scalable-spring-applications-using-inmemory-data-grids-53086251&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Building highly scalable, low latency applications while simultaneously preserving consistency, high availability and resiliency requires a new breed of technology. In this presentation we introduce Pivotal GemFire along with the open source offering, Apache Geode. Apache Geode is a proven, distributed, in-memory database with ACID properties that can handle large volumes of transactional data under heavy load. Apache Geode gives Spring-based applications the edge they require as demand changes without sacrificing integrity or the end-user&amp;rsquo;s experience.&lt;/p&gt;
&lt;p&gt;Using Spring Boot and Spring Data GemFire, we demonstrate how to effectively build highly scalable applications with Pivotal GemFire/Apache Geode starting with configuration and setup, then moving into persisting and accessing data with Spring Data Commons Repositories, OQL with proper Indexing, and Spring Data GemFire&amp;rsquo;s annotation-based, data-aware Function executions, based on the familiar Map-Reduce pattern of bringing business logic to your data. Next, we expand on these fundamental, foundational features with advanced topics on Partitioning, Collocation, Write-Through/Write-Behind, Register Interests/CQs, PDX and Cache as well as Global, JTA-based Transactions.&lt;/p&gt;
&lt;p&gt;Finally, we show how Pivotal GemFire/Apache Geode can be used to seamlessly address other application concerns from caching with Spring&amp;rsquo;s core Cache Abstraction to session management using Spring Session. And most importantly, we cover techniques for properly testing applications built on Pivotal GemFire along with techniques to manage and monitor your cluster. By sessions end, attendees should feel comfortable building highly-scalable applications effectively and productively.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/1mMDl-0Scmc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Introduction to Reactive Programming</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/02/springone2gx-2015-replay-introduction-to-reactive-programming" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2016-02-02:2364</id>
    <updated>2016-02-02T12:41:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015&lt;br/&gt;Presenters: Stephane Maldini &amp;amp; Rossen Stoyanchev&lt;br/&gt;Web / Javascript Track&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/introduction-to-reactive-programming"&gt;http://www.slideshare.net/SpringCentral/introduction-to-reactive-programming&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is your one stop shop introduction to get oriented to the world of reactive programming. There are lots of such intros out there even manifestos. We hope this is the one where you don&amp;rsquo;t get lost and it makes sense. Get a definition of what &amp;ldquo;reactive&amp;rdquo; means and why it matters. Learn about Reactive Streams and Reactive Extensions and the emerging ecosystem around them. Get a sense for what going reactive means for the programming model. See lots of hands-on demos introducing the basic concepts in composition libraries using RxJava and Reactor.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/fec9nEIybp0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>Spring Statemachine 1.1.0.M1 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/02/spring-statemachine-1-1-0-m1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Janne Valkealahti</name>
    </author>
    <id>tag:spring.io,2016-01-30:2360</id>
    <updated>2016-02-02T08:22:44Z</updated>
    <content type="html">&lt;p&gt;We’re pleased to announce a first milestone release of &lt;a href="https://projects.spring.io/spring-statemachine/"&gt;Spring Statemachine&lt;/a&gt; 1.1.0.M1.&lt;/p&gt;
&lt;p&gt;We released 1.0.0.M1 April 2015 and 1.0.0.RELEASE October 2015. We&amp;rsquo;ve also done 2 maintenance releases for 1.0.x series and now it&amp;rsquo;s time to look in a future with a 1.1.x serie. 1.0.x enters into a maintenance mode while main development will focus on 1.1.x. This doesn&amp;rsquo;t mean that we&amp;rsquo;ll stop with 1.0.x, maintenance fixes for it will be done until we&amp;rsquo;re succesfully transitioned beyond 1.1.x release. It is important in Spring projects to not drop maintenance until users are ready to move on into next minor/major release. We expect 1.0.x and 1.1.x live side by side until we fire out 1.2.x or 2.x serie in foreseeable future.&lt;/p&gt;
&lt;p&gt;What we actually got into this first milestone:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Support for protecting events, transitions and actions with &lt;a href="http://projects.spring.io/spring-security/"&gt;Spring Security&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;StateContext is now a first class citizen and has a bigger role both internally and how user interacts with it.&lt;/li&gt;
  &lt;li&gt;Annotation model(@WithStateMachine) has been enhanced to match features from listeners and context events.&lt;/li&gt;
  &lt;li&gt;Persist feature for Redis using Kryo serialization.&lt;/li&gt;
  &lt;li&gt;Additional bug fixes and minor enhacements which were backported into 1.0.x.&lt;/li&gt;
  &lt;li&gt;Two new samples using &lt;a href="http://docs.spring.io/spring-statemachine/docs/1.1.0.M1/reference/htmlsingle/#statemachine-examples-security"&gt;security&lt;/a&gt; and &lt;a href="http://docs.spring.io/spring-statemachine/docs/1.1.0.M1/reference/htmlsingle/#statemachine-examples-eventservice"&gt;redis persistence&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Full changes as usual is available from &lt;a href="https://github.com/spring-projects/spring-statemachine/blob/master/docs/src/info/changelog.txt"&gt;changelog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We added preliminary support for &lt;em&gt;Session&lt;/em&gt; scoped beans for a state machine which has been a base for getting support for &lt;a href="http://projects.spring.io/spring-session/"&gt;Spring Session&lt;/a&gt;. Further work is still work in progress waiting for next release from Spring Session 1.1.x order to support custom session serialization.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re planning to do second milestone before a release candidate order to get into Spring IO release later this year around May(ish). We may do a final release when we&amp;rsquo;re ready but IO schedule is a final possible target date.&lt;/p&gt;
&lt;p&gt;Thank you for all who have contributed in any way either via Stack Overflow, GitHub Issues or other channels. Driving force for changes really has been a community and requests from it.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring IO Platform 2.0.2.RELEASE</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/01/spring-io-platform-2-0-2-release" />
    <category term="releases" label="Releases" />
    <author>
      <name>Andy Wilkinson</name>
    </author>
    <id>tag:spring.io,2016-02-01:2362</id>
    <updated>2016-02-01T11:34:07Z</updated>
    <content type="html">&lt;p&gt;&lt;a href="http://platform.spring.io/platform"&gt;Spring IO Platform&lt;/a&gt; 2.0.2.RELEASE is now available from both &lt;a href="http://repo.spring.io/release"&gt;repo.spring.io&lt;/a&gt; and &lt;a href="http://search.maven.org/#search%7Cga%7C1%7Cg%3Aio.spring.platform"&gt;Maven Central&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;This maintenance release upgrades the versions of a number of the projects in the Platform to pick up their latest maintenance releases:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring AMQP 1.5.3.RELEASE&lt;/li&gt;
  &lt;li&gt;Spring Boot 1.3.2.RELEASE&lt;/li&gt;
  &lt;li&gt;Spring Integration Java DSL 1.1.2.RELEASE&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The versions of several third-party dependencies have also been updated.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://platform.spring.io/platform"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-io/platform"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-io/platform/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/platform/docs/2.0.2.RELEASE/reference/htmlsingle"&gt;Documentation&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Java DSL for Spring Integration 1.1.2 is available now</title>
    <link rel="alternate" href="https://spring.io/blog/2016/01/28/java-dsl-for-spring-integration-1-1-2-is-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>Artem Bilan</name>
    </author>
    <id>tag:spring.io,2016-01-28:2359</id>
    <updated>2016-01-28T14:23:00Z</updated>
    <content type="html">&lt;p&gt;Dear Spring Community,&lt;/p&gt;
&lt;p&gt;The Spring Integration Java DSL 1.1.2 has been released and is available now from &lt;a href="http://repo.spring.io/release"&gt;repo.spring.io&lt;/a&gt; and &lt;a href="http://search.maven.org/#search|ga|1|spring-integration-java-dsl"&gt;Maven Central&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;This maintenance release includes several &lt;a href="https://github.com/spring-projects/spring-integration-java-dsl/commits/v1.1.2.RELEASE"&gt;fixes&lt;/a&gt; and 3rd party dependency updates.&lt;/p&gt;
&lt;p&gt;Thank you everyone for contribution and any kind of feedback!&lt;/p&gt;
&lt;p&gt;We don&amp;rsquo;t have particular plans for version &lt;code&gt;1.2&lt;/code&gt;, because we are looking into the absorption of Java DSL project by the Spring Integration 5.0, where Java 8 is minimal, but feel free to ask us for more features and share any concerns which can be considered to be included in the next maintenance release.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/spring-projects/spring-integration-java-dsl"&gt;Project Page&lt;/a&gt; | &lt;a href="https://jira.spring.io/browse/INTEXT"&gt;JIRA&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-integration/blob/master/CONTRIBUTING.md"&gt;Contributions&lt;/a&gt; | &lt;a href="http://stackoverflow.com"&gt;StackOverflow&lt;/a&gt; (&lt;code&gt;spring-integration&lt;/code&gt; tag)&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>AngularJS - Escaping the Expression Sandbox for XSS</title>
    <link rel="alternate" href="https://spring.io/blog/2016/01/28/angularjs-escaping-the-expression-sandbox-for-xss" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Rob Winch</name>
    </author>
    <id>tag:spring.io,2016-01-27:2358</id>
    <updated>2016-01-28T13:07:00Z</updated>
    <content type="html">&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;: This is a summary of &lt;a href="http://blog.portswigger.net/2016/01/xss-without-html-client-side-template.html"&gt;XSS without HTML: Client-Side Template Injection with AngularJS&lt;/a&gt;. Previously the citation was in the middle of the document and difficult to find. The goal of the summary is to present the exploit and a fix without all the nuances, not to claim the work as my own.&lt;/p&gt;&lt;h1&gt;&lt;a href="#introduction" class="anchor" name="introduction"&gt;&lt;/a&gt;Introduction&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://angularjs.org/"&gt;AngularJS&lt;/a&gt; is a popular JavaScript framework that allows embedding &lt;a href="https://code.angularjs.org/1.4.9/docs/guide/expression"&gt;expressions&lt;/a&gt; within double curly braces. &lt;a href="https://code.angularjs.org/1.4.9/docs/guide/expression#example"&gt;For example&lt;/a&gt;, the expression &lt;code&gt;1+2={{1+2}}&lt;/code&gt; will render as &lt;code&gt;1+2=3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This means that if the server echos out user input that contains double curly braces, the user can perform a XSS exploit using Angular expressions.&lt;/p&gt;&lt;h1&gt;&lt;a href="#writing-user-input-server-side" class="anchor" name="writing-user-input-server-side"&gt;&lt;/a&gt;Writing User Input Server Side&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s explore a page that is safely HTML encoding user input. In our example below, we use &lt;a href="http://www.thymeleaf.org/"&gt;Thymeleaf&lt;/a&gt; to HTML encode and then output the attribute &lt;code&gt;username&lt;/code&gt; to the text of the div of our page.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint html"&gt;&amp;lt;html xmlns:th=&amp;quot;http://www.thymeleaf.org&amp;quot;&amp;gt;&#xD;
&amp;lt;head&amp;gt;&#xD;
&amp;lt;title&amp;gt;AngularJS - Escaping the Expression Sandbox&amp;lt;/title&amp;gt;&#xD;
&amp;lt;/head&amp;gt;&#xD;
&amp;lt;body&amp;gt;&#xD;
&amp;lt;div th:text=&amp;quot;${username}&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&#xD;
&amp;lt;/body&amp;gt;&#xD;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If username is &lt;code&gt;&amp;lt;script&amp;gt;alert(&amp;#39;Rob&amp;#39;)&amp;lt;/script&amp;gt;&lt;/code&gt; the output might look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint html"&gt;&amp;lt;html xmlns:th=&amp;quot;http://www.thymeleaf.org&amp;quot;&amp;gt;&#xD;
&amp;lt;head&amp;gt;&#xD;
&amp;lt;title&amp;gt;AngularJS - Escaping the Expression Sandbox&amp;lt;/title&amp;gt;&#xD;
&amp;lt;/head&amp;gt;&#xD;
&amp;lt;body&amp;gt;&#xD;
&amp;lt;div&amp;gt;&amp;amp;lt;script&amp;amp;gt;alert(&amp;amp;#39;Rob&amp;amp;#39;)&amp;amp;lt;/script&amp;amp;gt;&amp;lt;/div&amp;gt;&#xD;
&amp;lt;/body&amp;gt;&#xD;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will notice that the output is properly HTML encoded. This means our application is currently safe from XSS attacks.&lt;/p&gt;&lt;h1&gt;&lt;a href="#adding-angularjs" class="anchor" name="adding-angularjs"&gt;&lt;/a&gt;Adding AngularJS&lt;/h1&gt;
&lt;p&gt;Our application is currently secure against XSS attacks. Let&amp;rsquo;s update the application to use AngularJS&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint html"&gt;&amp;lt;html xmlns:th=&amp;quot;http://www.thymeleaf.org&amp;quot;&amp;gt;&#xD;
&amp;lt;head&amp;gt;&#xD;
&amp;lt;title&amp;gt;Angular Expression - safe&amp;lt;/title&amp;gt;&#xD;
&amp;lt;script src=&amp;quot;angular-1.4.8.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&#xD;
&amp;lt;/head&amp;gt;&#xD;
&amp;lt;body ng-app&amp;gt;&#xD;
&amp;lt;div th:text=&amp;quot;${username}&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&#xD;
&amp;lt;/body&amp;gt;&#xD;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will notice two changes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;We include added &lt;code&gt;angular-1.4.8.min.js&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;We added &lt;code&gt;ng-app&lt;/code&gt; to the body element&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Our application is now vulnerable to XSS attacks, but how can we exploit it? The big clue should be our introduction to Angular expressions. What would happen with a username of &lt;code&gt;1+2={{1+2}}&lt;/code&gt;? The result would be:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint html"&gt;&amp;lt;html&amp;gt;&#xD;
&amp;lt;head&amp;gt;&#xD;
&amp;lt;title&amp;gt;Angular Expression - safe&amp;lt;/title&amp;gt;&#xD;
&amp;lt;script src=&amp;quot;angular-1.4.8.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&#xD;
&amp;lt;/head&amp;gt;&#xD;
&amp;lt;body ng-app=&amp;quot;&amp;quot;&amp;gt;&#xD;
&amp;lt;div&amp;gt;1+2={{1+2}}&amp;lt;/div&amp;gt;&#xD;
&amp;lt;/body&amp;gt;&#xD;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Angular would then update the DOM to be:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint html"&gt;&amp;lt;html&amp;gt;&#xD;
&amp;lt;head&amp;gt;&#xD;
&amp;lt;title&amp;gt;Angular Expression - safe&amp;lt;/title&amp;gt;&#xD;
&amp;lt;script src=&amp;quot;angular-1.4.8.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&#xD;
&amp;lt;/head&amp;gt;&#xD;
&amp;lt;body ng-app=&amp;quot;&amp;quot;&amp;gt;&#xD;
&amp;lt;div&amp;gt;1+2=3&amp;lt;/div&amp;gt;&#xD;
&amp;lt;/body&amp;gt;&#xD;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could try a username of &lt;code&gt;{{alert(&amp;#39;Rob&amp;#39;)}}&lt;/code&gt;, but that would be blocked by &lt;a href="https://code.angularjs.org/1.4.9/docs/guide/security#expression-sandboxing"&gt;Expression Sandboxing&lt;/a&gt;. At this point you might think that we are safe. However, despite appearing in the security section of the documention, Expression Sandboxing is not intended to provide security.&lt;/p&gt;
&lt;p&gt;More concretely, the documentation states the following about &lt;a href="https://code.angularjs.org/1.4.9/docs/guide/security#mixing-client-side-and-server-side-templates"&gt;Mixing client-side and server-side templates&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;In general, we recommend against this because it can create unintended XSS vectors.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ultimately, this means that if you allow user input to be rendered in templates on the server side, the application is vulnerable to XSS attacks. Let&amp;rsquo;s take a look at a concrete example.&lt;/p&gt;&lt;h1&gt;&lt;a href="#escaping-the-expression-sandbox" class="anchor" name="escaping-the-expression-sandbox"&gt;&lt;/a&gt;Escaping the Expression Sandbox&lt;/h1&gt;
&lt;p&gt;If our payload is sandboxed, how can we provide a valid XSS exploit?&lt;br/&gt;What would happen if our username was:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint javascript"&gt;{{&#xD;
&amp;#39;a&amp;#39;.constructor.prototype.charAt=[].join;&#xD;
eval(&amp;#39;x=1} } };alert(1)//&amp;#39;);&#xD;
}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By overriding the native function &lt;code&gt;charAt&lt;/code&gt; we can bypass Angular&amp;rsquo;s Expression Sandbox and allow us to execute &lt;code&gt;alert(1)&lt;/code&gt;. Refer to &lt;a href="http://blog.portswigger.net/2016/01/xss-without-html-client-side-template.html"&gt;XSS without HTML: Client-Side Template Injection with AngularJS&lt;/a&gt; for complete details of how the exploit works.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: This payload targets Chrome and AngularJS 1.4.8. It is not known to work in other browsers.&lt;/p&gt;&lt;h1&gt;&lt;a href="#conclusion" class="anchor" name="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Allowing the server to echo user input into an Angular template will expose your application to XSS exploits. More generally, you should not mix server side rendering of user input and client side templates. You can find a sample that accompanies this blog post at &lt;a href="https://github.com/rwinch/angularjs-escaping-expression-sandbox"&gt;rwinch/angularjs-escaping-expression-sandbox&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Introducing Spring Cloud Task</title>
    <link rel="alternate" href="https://spring.io/blog/2016/01/27/introducing-spring-cloud-task" />
    <category term="releases" label="Releases" />
    <author>
      <name>Michael Minella</name>
    </author>
    <id>tag:spring.io,2016-01-27:2357</id>
    <updated>2016-01-27T04:44:00Z</updated>
    <content type="html">&lt;p&gt;Today we are pleased to introduce a new project in the Spring portfolio, &lt;a href="http://cloud.spring.io/spring-cloud-task/"&gt;Spring Cloud Task&lt;/a&gt;.  Under the umbrella of the &lt;a href="http://projects.spring.io/spring-cloud/"&gt;Spring Cloud&lt;/a&gt; grouping of projects and the sister project of &lt;a href="http://cloud.spring.io/spring-cloud-stream/"&gt;Spring Cloud Stream&lt;/a&gt;, Spring Cloud Task aims to bring functionality required to support short lived microservices to Spring Boot based applications.  With this blog post, we are releasing our first milestone of the project and are eager for your input and feedback.&lt;/p&gt;
&lt;h2&gt;The Goals of Spring Cloud Task&lt;/h2&gt;
&lt;p&gt;In most cases, the modern cloud environment is designed around the execution of processes that are not expected to end (think web applications or stream modules). If they do, it's considered a failure by the platform and they are typically restarted. While many platforms do have some method to execute a process that is expected to end (a batch job for example), the results of that execution are typically not maintained in a consumable way.  Yet for mission critical applications, even though they are short lived, they still have the same non-functional requirements long lived processes have.&lt;/p&gt;
&lt;p&gt;While this functionality is useful in a cloud environment, the same issues can arise in a traditional deployment model as well. When executing Spring Boot applications via a scheduler like cron, it can be useful to be able to monitor the results of the application after it’s completion.&lt;/p&gt;
&lt;p&gt;A Spring Cloud Task takes the approach that a Spring Boot application can have a start and an end and still be production grade.  Batch applications are just one example of where short lived processes can be helpful.&lt;/p&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;In this first release of Spring Cloud Task, we introduce the basics of the configuration mechanisms as well as a repository to record what happens when a task is executed.  Those who are familiar with &lt;a href="http://projects.spring.io/spring-batch/"&gt;Spring Batch&lt;/a&gt; and its job repository should find the general paradigms of Spring Cloud Task familiar.&lt;/p&gt;
&lt;p&gt;To get familiar with Spring Cloud Task, the easiest way is to write an application.  The documentation walks you through the creation of an initial task and its execution.  You can read more about that &lt;a href="http://docs.spring.io/spring-cloud-task/1.0.0.M1/reference/htmlsingle/#getting-started-developing-first-task"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Where we're going&lt;/h2&gt;
&lt;p&gt;Tasks will be a new primitive within &lt;a href="http://cloud.spring.io/spring-cloud-dataflow/"&gt;Spring Cloud Data Flow&lt;/a&gt; in the coming releases allowing users to execute virtually any Spring Boot application as a short lived task.  This provides the flexibility to run everything from a simple &lt;code&gt;CommandLineRunner&lt;/code&gt; to a full batch job in dynamic way, allowing resources to be consumed on demand and returned once complete.  The upcoming releases including Spring Cloud Task 1.0 GA which we plan for just before Spring Cloud Data Flow goes 1.0 GA, will be adding features to support that effort.&lt;/p&gt;
&lt;h2&gt;Tell us what you think!&lt;/h2&gt;
&lt;p&gt;Spring Cloud Task is a new and exciting project that we feel fills an under served area of enterprise development.  However, we want to know what you think.  Please let us know via the issues in &lt;a href="https://github.com/spring-cloud/spring-cloud-task/issues"&gt;Github Issues&lt;/a&gt;, &lt;a href="http://stackoverflow.com/questions/tagged/spring-cloud"&gt;StackOverflow&lt;/a&gt;, or directly on &lt;a href="http://twitter.com/springcentral"&gt;Twitter&lt;/a&gt;!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - January 26th, 2016</title>
    <link rel="alternate" href="https://spring.io/blog/2016/01/26/this-week-in-spring-january-26th-2016" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2016-01-26:2356</id>
    <updated>2016-01-26T12:29:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installation of &lt;em&gt;This Week in Spring&lt;/em&gt;! Here we are, already staring at the second month of the year and, &lt;em&gt;boy&lt;/em&gt;!, are things getting exciting! I&amp;rsquo;m about to start hitting the road again and &lt;a href="http://twitter.com/starbuxman"&gt;I&amp;rsquo;d&lt;/a&gt; love &lt;a href="mailto:josh@joshlong.com"&gt;to talk to you&lt;/a&gt; and your organization if you&amp;rsquo;re near any of the following places and events in February:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://microxchg.io/2016/index.html"&gt;Microchg Conf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.jfokus.se/jfokus/"&gt;JFokus&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.devnexus.com/s/index"&gt;Devnexus&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Hatford, Connecticut (around 17/2/2016)&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://confoo.ca/en"&gt;Confoo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Shanghai (around 26/2/2016)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Anyway, without further ado, let&amp;rsquo;s get into it!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;our own Paul Chapman chimes in on the &lt;a href="https://spring.io/blog/2016/01/21/pivotal-academy-launches-updated-spring-classes"&gt;updated courseware available for developers who want to learn about Spring&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;there are (finally!) new guides available on using &lt;strong&gt;Spring Cloud&lt;/strong&gt;: &lt;a href="https://spring.io/guides/gs/routing-and-filtering/"&gt;routing and filtering using the Netflix Zuul microproxy library and Spring Cloud&lt;/a&gt;, &lt;a href="https://spring.io/guides/gs/centralized-configuration/"&gt;centralized configuration with the Spring Cloud Config Server&lt;/a&gt;, the &lt;a href="https://spring.io/guides/gs/circuit-breaker/"&gt;circuit breaker design pattern&lt;/a&gt;, and service registration and discovery &lt;a href="https://spring.io/guides/gs/service-registration-and-discovery/"&gt;using Spring Cloud&amp;rsquo;s &lt;code&gt;DiscoveryClient&lt;/code&gt; abstraction and Spring Cloud&amp;rsquo;s integration of Netflix Eureka&lt;/a&gt;. Stay tuned, we&amp;rsquo;ve got more in the pipeline!&lt;/li&gt;
  &lt;li&gt;Spring Boot lead Phil Webb just announced &lt;a href="https://spring.io/blog/2016/01/22/spring-boot-1-3-2-released"&gt;the release of 1.3.2&lt;/a&gt;, which includes updates to dependencies and a few bug fixes&lt;/li&gt;
  &lt;li&gt;check out Jetbrain&amp;rsquo;s Yann Cébron and our very own Stéphane Nicoll&amp;rsquo;s &lt;a href="http://www.infoq.com/presentations/spring-boot-intellij"&gt;epic SpringOne2GX 2015 presentation on how Spring Boot lends itself to first-class tooling&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;our pal Baeldung is back at it again, &lt;a href="https://www.youtube.com/watch?v=71UFLAVXgq0"&gt;this time with a video on monitoring Spring Boot applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://tomaszdziurko.pl/2016/01/dockerizing-spring-boot-application/"&gt;http://tomaszdziurko.pl/2016/01/dockerizing-spring-boot-application/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Neo4j has a nice transcription &lt;a href="http://neo4j.com/blog/polyglot-persistence-microservices-spring-cloud-neo4j/"&gt;of our GraphConnect 2015 talk&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;this third entry in a Spanish-language series &lt;a href="https://www.paradigmadigital.com/dev/integrar-microservicios-spring-cloud-34/"&gt;on building microservices with Spring Boot and Spring Cloud looks pretty good!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;the talk I gave on building cloud native Java applications &lt;a href="http://www.infoq.com/br/presentations/the-cloud-native-application-microservices-with-spring-boot-and-spring-cloud"&gt;using Spring Boot and Spring Cloud at QCon Rio de Janeiro&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I really dug our pal Nicolas Frankel&amp;rsquo;s post &lt;a href="https://blog.frankel.ch/playing-with-spring-boot-vaadin-and-kotlin"&gt;on using Spring Boot and Vaadin together with the Kotlin programming language&lt;/a&gt;. Kotlin&amp;rsquo;s a very nice language and this post covers some issues you&amp;rsquo;ll encounter in your first steps using Spring and Kotlin together. Very handy!&lt;/li&gt;
  &lt;li&gt;Groovy is &lt;em&gt;also&lt;/em&gt; a very nice programming language and if you want further proof then you need look &lt;a href="https://dzone.com/articles/grails-goodness-using-spring-cloud-config-server"&gt;no further than this post which demonstrates standing up a Spring Cloud Config Server in almost no code at all!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Spring Boot 1.3.2 released</title>
    <link rel="alternate" href="https://spring.io/blog/2016/01/22/spring-boot-1-3-2-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Phil Webb</name>
    </author>
    <id>tag:spring.io,2016-01-22:2355</id>
    <updated>2016-01-22T03:26:14Z</updated>
    <content type="html">&lt;p&gt;Spring Boot 1.3.2 has been released and is available now from &lt;a href="http://repo.spring.io/release"&gt;repo.spring.io&lt;/a&gt; and &lt;a href="http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.springframework.boot%22"&gt;Maven Central&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;This maintenance release includes a &lt;a href="https://github.com/spring-projects/spring-boot/issues?q=milestone%3A1.3.2+is%3Aclosed"&gt;number of fixes&lt;/a&gt; and 3rd party dependency updates.&lt;/p&gt;
&lt;p&gt;If you are upgrading from 1.3.1 there is one potentially breaking change; we now only search for &lt;code&gt;messages.properties&lt;/code&gt; (and not &lt;code&gt;messages*.properties&lt;/code&gt;) to enable auto-configuration of a message source. If you previously had a message file of the form &lt;code&gt;messages_en.properties&lt;/code&gt; and you didn&amp;rsquo;t include a default &lt;code&gt;messages.properties&lt;/code&gt; file, you will now need to add one.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-boot/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle"&gt;Documentation&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Pivotal Academy Launches Updated Spring Classes</title>
    <link rel="alternate" href="https://spring.io/blog/2016/01/21/pivotal-academy-launches-updated-spring-classes" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Paul</name>
    </author>
    <id>tag:spring.io,2015-11-17:2299</id>
    <updated>2016-01-21T01:01:07Z</updated>
    <content type="html">&lt;p&gt;It has been 7 years now since I taught my first Spring class. At that time almost everything was XML and configuring JPA or Spring Security, for example, could be a lot of hard work. Spring has matured a great deal in the meantime with component-scanning, Java Configuration and Spring Boot making it much more fun to use.&lt;/p&gt;
&lt;p&gt;At every stage we have updated our Spring courses to reflect these changes and I am pleased to announce that our most popular Spring training courses - Core Spring, Spring Web and Enterprise Spring - have been revised to align with the latest Spring 4.2 release. These courses include much more &lt;a href="http://projects.spring.io/spring-boot"&gt;Spring Boot&lt;/a&gt; material and expanded coverage of features like &lt;a href="http://projects.spring.io/spring-data"&gt;Spring Data&lt;/a&gt;, &lt;a href="http://projects.spring.io/spring-hateoas"&gt;Spring HATEOAS&lt;/a&gt;, &lt;a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/websocket.html"&gt;Spring MVC Websockets&lt;/a&gt;, &lt;a href="http://projects.spring.io/spring-xd"&gt;Spring XD&lt;/a&gt;, &lt;a href="http://projects.spring.io/spring-cloud"&gt;Spring Cloud&lt;/a&gt; and microservices.&lt;/p&gt;
&lt;p&gt;These courses are the perfect opportunity to enhance your skill-set and become &lt;em&gt;Spring Certified&lt;/em&gt;. You can learn more about our curriculum below and I encourage you to visit &lt;em&gt;The Pivotal Academy&lt;/em&gt; at &lt;a href="https://pivotal.io/academy"&gt;https://pivotal.io/academy&lt;/a&gt; to schedule your class today.&lt;/p&gt;&lt;h1&gt;&lt;a href="#core-spring" class="anchor" name="core-spring"&gt;&lt;/a&gt;Core Spring&lt;/h1&gt;
&lt;p&gt;Designed for developers and architects, Core Spring is a 4-day class that explores all the basics of using Spring. The content is broken down into three sections: the Spring Container, Data Management and building Web Applications&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Container&lt;/strong&gt;: configuration using Java Config, Spring annotations like @Autowired, XML bean-files, Aspect Oriented programming and Spring based integration testing.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Data Management&lt;/strong&gt;: &lt;code&gt;JdbcTemplate&lt;/code&gt;, caching using &lt;code&gt;@Cachable&lt;/code&gt;, in-memory embedded databases for testing, Spring managed transactions, JPA and Spring Data&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Web Applications&lt;/strong&gt;: writing Spring MVC Controllers, using Spring Boot, implementing REST using Spring MVC, Spring Security and Cloud Native applications (Spring Cloud)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The course has been overhauled to use Spring 4.2 and covers several features introduced in Spring 4 such as &lt;code&gt;@Optional&lt;/code&gt; parameters, &lt;code&gt;@Sql&lt;/code&gt; for database testing and &lt;code&gt;@RestController&lt;/code&gt;,&lt;br/&gt;Note that as this is a fundamentals course many of the new features in 4.x are beyond its scope.&lt;/p&gt;
&lt;p&gt;Another big change to the course is expanding coverage of web applications to include Spring Boot and Building Microservices with Spring Cloud. And for those of you who may have taken or were familiar with Core Spring 3.x, the course and labs have been fully revamped to use Annotations and Java Configuration.&lt;/p&gt;
&lt;p&gt;To learn more about our updated Core Spring course, to view the complete course datasheet and to register for class, visit the &lt;a href="https://pivotal.io/academy#core-spring"&gt;course page&lt;/a&gt; at the Pivotal Academy.&lt;/p&gt;&lt;h1&gt;&lt;a href="#spring-web" class="anchor" name="spring-web"&gt;&lt;/a&gt;Spring Web&lt;/h1&gt;
&lt;p&gt;Looking for a deep-dive into Spring MVC and related technologies? Our 4-days Spring web course teaches you how to create enterprise web applications across four key areas:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Basics&lt;/strong&gt;: Spring MVC Controllers, layout management, defining views, using multiple view technologies and form handling&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Internals&lt;/strong&gt;: Configuring a Spring MVC application using web.xml or Servlet 3 Java configuration, understanding Handler Mappers, Handler Adapters, View Resolvers and Interceptors, Internationalization, Resource handling including CORS support, &lt;a href="https://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc"&gt;exception handling&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Enterprise&lt;/strong&gt;: implementing REST, using the &lt;code&gt;RestTemplate&lt;/code&gt;, Spring Security, Testing with the MockMvc framework, Spring Boot simplification, using Web Sockets&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This course has also been overhauled to use Spring 4.2 and Java 8 covering Spring 4 features such as &lt;code&gt;@RestControllers&lt;/code&gt;, &lt;code&gt;AsyncRestTemplate&lt;/code&gt;, &lt;code&gt;ResponseBodyAdvice&lt;/code&gt;, the resource handling pipeline, Web Sockets and &lt;code&gt;@CrossOrigin&lt;/code&gt; (CORS). The course also explores Spring Boot since it makes writing Spring MVC applications quick and easy. However, while this is beneficial, many of the labs do not require Spring Boot as we want attendees to learn how to use MVC fully and be able to override Spring Boot defaults with configurations of their own. &lt;/p&gt;
&lt;p&gt;Pivotal Academy recommends students that are new to Spring attend the Core Spring class prior to attending Spring Web. However, if you have a good working knowledge of Spring and your primary interest is building web-applications, our Spring Web course is the right fit for you. &lt;/p&gt;
&lt;p&gt;To learn more about our updated Spring Web course, to view the complete course datasheet and to register for class, visit the &lt;a href="https://pivotal.io/academy#spring-web"&gt;course page&lt;/a&gt; at the Pivotal Academy.&lt;/p&gt;&lt;h1&gt;&lt;a href="#enterprise-spring" class="anchor" name="enterprise-spring"&gt;&lt;/a&gt;Enterprise Spring&lt;/h1&gt;
&lt;p&gt;Use Spring to build loosely coupled event-driven architectures composed from communicating components and processes. A microservices architecture might be one example of this approach.&lt;/p&gt;
&lt;p&gt;Based in part on the popular &lt;a href="http://www.enterpriseintegrationpatterns.com/"&gt;Enterprise Integration Patterns&lt;/a&gt; book, the course covers inter-process communications using Web Services (REST) and Messaging (JMS, AMQP) and then builds on this foundation to cover Spring Integration, Spring Batch and Spring XD.&lt;/p&gt;
&lt;p&gt;Revised for Spring 4.2 the course has expanded coverage of REST and covers new features such as &lt;code&gt;UriComponentsBuilder&lt;/code&gt;, &lt;code&gt;@JmsListener&lt;/code&gt;, our Java DSL for configuring Spring Integration, and an entirely new section on building integration pipelines using Spring XD.&lt;/p&gt;
&lt;p&gt;A reasonable familiarity with Spring and Spring Boot is assumed. We recommend that students that are new to Spring attend the Core Spring class prior to attending Enterprise Spring.&lt;/p&gt;
&lt;p&gt;To learn more about our updated Enterprise Spring course, to view the complete course datasheet and to register for class, visit the &lt;a href="https://pivotal.io/academy#enterprise-spring"&gt;course page&lt;/a&gt; at the Pivotal Academy.&lt;/p&gt;&lt;h1&gt;&lt;a href="#more-information" class="anchor" name="more-information"&gt;&lt;/a&gt;More Information&lt;/h1&gt;
&lt;p&gt;For more information and to view our complete portfolio of Application Framework, Cloud Native and Big Data Suite classes, visit us at the &lt;a href="https://pivotal.io/academy"&gt;Pivotal Academy&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
</feed>
